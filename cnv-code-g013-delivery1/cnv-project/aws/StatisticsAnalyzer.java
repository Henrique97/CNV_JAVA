package aws;
/*
 * This Java source file was generated by the Gradle 'init' task.
 */

import BIT.highBIT.*;
import BIT.lowBIT.Local_Variable_Table;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.util.Enumeration;
import java.nio.file.StandardOpenOption;

public class StatisticsAnalyzer {

    private static ThreadLocal<Metrics> metrics = new ThreadLocal<Metrics>(){
        @Override
        protected Metrics initialValue() {
            return new Metrics();
        }
    };

    public static void main(String[] argv) {
        try {
            File in_dir = new File(argv[0]);
            File out_dir = new File(argv[1]);

            if (in_dir.isDirectory() && out_dir.isDirectory()) {
                analyzeInstructions(in_dir, out_dir);
            }
            else {
                throw new NullPointerException("No Args");
            }
        }
        catch (NullPointerException e) {
            e.printStackTrace();
        }
    }



    public static void analyzeInstructions(File in_dir, File out_dir) {
        String filelist[] = in_dir.list();

        for (int i = 0; i < filelist.length; i++) {
            String filename = filelist[i];
            if (filename.endsWith(".class")) {
                String in_filename = in_dir.getAbsolutePath() + System.getProperty("file.separator") + filename;
                String out_filename = out_dir.getAbsolutePath() + System.getProperty("file.separator") + filename;
                ClassInfo ci = new ClassInfo(in_filename);


                for (Enumeration e = ci.getRoutines().elements(); e.hasMoreElements(); ) {
                    Routine routine = (Routine) e.nextElement();
                    InstructionArray instructions = routine.getInstructionArray();
                    routine.addBefore("aws/StatisticsAnalyzer", "dynMethodCount", new Integer(0));
                    for (Enumeration instrs = instructions.elements(); instrs.hasMoreElements(); ) {
                        Instruction instr = (Instruction) instrs.nextElement();
                        int opcode = instr.getOpcode();
                        if ((opcode==InstructionTable.NEW) ||
                                (opcode==InstructionTable.newarray) ||
                                (opcode==InstructionTable.invokespecial) ||
                                (opcode==InstructionTable.invokevirtual)) {
                            instr.addBefore("aws/StatisticsAnalyzer", "registerCountOpCode", new Integer(opcode));
                        }

                        // Used to help on the stack depth measuring
                        if((opcode==InstructionTable.areturn) ||
                                (opcode==InstructionTable.ireturn) ||
                                (opcode==InstructionTable.dreturn) ||
                                (opcode==InstructionTable.freturn) ||
                                (opcode==InstructionTable.lreturn) ||
                                (opcode==InstructionTable.RETURN))
                            instr.addBefore("aws/StatisticsAnalyzer", "dynMethodCount", new Integer(1));

                        short instructionType = instr.getInstructionType();
                        if (instructionType == InstructionTable.LOAD_INSTRUCTION ||
                                instructionType == InstructionTable.STORE_INSTRUCTION){
                            instr.addBefore("aws/StatisticsAnalyzer", "registerCountInstType", new Integer(instructionType));
                        }
                    }
                }
                ci.write(out_filename);
            }
        }
    }

    public static void printResults(String args) {
        Metrics threadMetrics = metrics.get();
        String cnt = String.format("%d,%d,%d,%d,%d,%d,%d,%d,%d",
                Thread.currentThread().getId(), threadMetrics.newcount, threadMetrics.newarraycount, threadMetrics.storescount,
                threadMetrics.loadscount, threadMetrics.invokespecialcount, threadMetrics.invokevirtualcount,threadMetrics.maxDepth,threadMetrics.level);
        System.out.println(args);
        cnt= args + ","+ cnt;
        System.out.println("cnt: " + cnt);
        try {
            AmazonDynamoDBitems.writeDB(cnt);
        } catch (Exception e) {
            System.out.println("Error Writing To Database");
        }
        threadMetrics.newcount = threadMetrics.newarraycount = threadMetrics.storescount = threadMetrics.loadscount =
                threadMetrics.invokespecialcount = threadMetrics.invokevirtualcount = threadMetrics.level = threadMetrics.maxDepth = 0;
    }

    public static void registerCountOpCode(int opcode)
    {
        Metrics threadMetrics = metrics.get();

        switch(opcode) {
            case InstructionTable.NEW:
                threadMetrics.newcount++;
                break;
            case InstructionTable.newarray:
                threadMetrics.newarraycount++;
                break;
            case InstructionTable.invokespecial:
                threadMetrics.invokespecialcount++;
                break;
            case InstructionTable.invokevirtual:
                threadMetrics.invokevirtualcount++;
                break;
        }
    }

    public static void dynMethodCount(int flag) {
        Metrics threadMetrics = metrics.get();
        switch(flag) {
            case 0:
                threadMetrics.level++;
                break;
            case 1:
                if(threadMetrics.level > threadMetrics.maxDepth){
                    threadMetrics.maxDepth=threadMetrics.level;
                }
                threadMetrics.level--;
                break;
        }
    }

    public static void registerCountInstType(int type)
    {
        Metrics threadMetrics = metrics.get();
        switch(type) {
            case InstructionTable.STORE_INSTRUCTION:
                threadMetrics.storescount++;
                break;
            case InstructionTable.LOAD_INSTRUCTION:
                threadMetrics.loadscount++;
                break;
        }
    }
}
